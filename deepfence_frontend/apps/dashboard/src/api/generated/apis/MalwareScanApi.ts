/* tslint:disable */
/* eslint-disable */
/**
 * Deepfence ThreatMapper
 * Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: community@deepfence.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiDocsBadRequestResponse,
  ApiDocsFailureResponse,
  ModelScanStatusResp,
  ModelScanTriggerReq,
  ModelScanTriggerResp,
} from '../models';
import {
    ApiDocsBadRequestResponseFromJSON,
    ApiDocsBadRequestResponseToJSON,
    ApiDocsFailureResponseFromJSON,
    ApiDocsFailureResponseToJSON,
    ModelScanStatusRespFromJSON,
    ModelScanStatusRespToJSON,
    ModelScanTriggerReqFromJSON,
    ModelScanTriggerReqToJSON,
    ModelScanTriggerRespFromJSON,
    ModelScanTriggerRespToJSON,
} from '../models';

export interface StartMalwareScanRequest {
    modelScanTriggerReq?: ModelScanTriggerReq;
}

export interface StatusMalwareScanRequest {
    scanId: string;
}

export interface StopMalwareScanRequest {
    modelScanTriggerReq?: ModelScanTriggerReq;
}

/**
 * MalwareScanApi - interface
 * 
 * @export
 * @interface MalwareScanApiInterface
 */
export interface MalwareScanApiInterface {
    /**
     * Start Malware Scan on agent or registry
     * @summary Start Malware Scan
     * @param {ModelScanTriggerReq} [modelScanTriggerReq] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MalwareScanApiInterface
     */
    startMalwareScanRaw(requestParameters: StartMalwareScanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelScanTriggerResp>>;

    /**
     * Start Malware Scan on agent or registry
     * Start Malware Scan
     */
    startMalwareScan(requestParameters: StartMalwareScanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelScanTriggerResp>;

    /**
     * Get Malware Scan status on agent or registry
     * @summary Get Malware Scan Status
     * @param {string} scanId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MalwareScanApiInterface
     */
    statusMalwareScanRaw(requestParameters: StatusMalwareScanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelScanStatusResp>>;

    /**
     * Get Malware Scan status on agent or registry
     * Get Malware Scan Status
     */
    statusMalwareScan(requestParameters: StatusMalwareScanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelScanStatusResp>;

    /**
     * Stop Malware Scan on agent or registry
     * @summary Stop Malware Scan
     * @param {ModelScanTriggerReq} [modelScanTriggerReq] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MalwareScanApiInterface
     */
    stopMalwareScanRaw(requestParameters: StopMalwareScanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Stop Malware Scan on agent or registry
     * Stop Malware Scan
     */
    stopMalwareScan(requestParameters: StopMalwareScanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class MalwareScanApi extends runtime.BaseAPI implements MalwareScanApiInterface {

    /**
     * Start Malware Scan on agent or registry
     * Start Malware Scan
     */
    async startMalwareScanRaw(requestParameters: StartMalwareScanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelScanTriggerResp>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/deepfence/scan/start/malware`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModelScanTriggerReqToJSON(requestParameters.modelScanTriggerReq),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelScanTriggerRespFromJSON(jsonValue));
    }

    /**
     * Start Malware Scan on agent or registry
     * Start Malware Scan
     */
    async startMalwareScan(requestParameters: StartMalwareScanRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelScanTriggerResp> {
        const response = await this.startMalwareScanRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Malware Scan status on agent or registry
     * Get Malware Scan Status
     */
    async statusMalwareScanRaw(requestParameters: StatusMalwareScanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelScanStatusResp>> {
        if (requestParameters.scanId === null || requestParameters.scanId === undefined) {
            throw new runtime.RequiredError('scanId','Required parameter requestParameters.scanId was null or undefined when calling statusMalwareScan.');
        }

        const queryParameters: any = {};

        if (requestParameters.scanId !== undefined) {
            queryParameters['scan_id'] = requestParameters.scanId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/deepfence/scan/status/malware`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelScanStatusRespFromJSON(jsonValue));
    }

    /**
     * Get Malware Scan status on agent or registry
     * Get Malware Scan Status
     */
    async statusMalwareScan(requestParameters: StatusMalwareScanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelScanStatusResp> {
        const response = await this.statusMalwareScanRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Stop Malware Scan on agent or registry
     * Stop Malware Scan
     */
    async stopMalwareScanRaw(requestParameters: StopMalwareScanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/deepfence/scan/stop/malware`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModelScanTriggerReqToJSON(requestParameters.modelScanTriggerReq),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Stop Malware Scan on agent or registry
     * Stop Malware Scan
     */
    async stopMalwareScan(requestParameters: StopMalwareScanRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.stopMalwareScanRaw(requestParameters, initOverrides);
    }

}
